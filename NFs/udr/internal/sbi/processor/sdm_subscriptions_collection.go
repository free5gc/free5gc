/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi/models"
	udr_context "github.com/free5gc/udr/internal/context"
	"github.com/free5gc/udr/internal/util"
)

func (p *Processor) CreateSdmSubscriptionsProcedure(c *gin.Context, SdmSubscription models.SdmSubscription,
	collName string, ueId string,
) {
	udrSelf := udr_context.GetSelf()

	value, ok := udrSelf.UESubsCollection.Load(ueId)
	if !ok {
		udrSelf.UESubsCollection.Store(ueId, new(udr_context.UESubsData))
		value, _ = udrSelf.UESubsCollection.Load(ueId)
	}
	UESubsData := value.(*udr_context.UESubsData)
	if UESubsData.SdmSubscriptions == nil {
		UESubsData.SdmSubscriptions = make(map[string]*models.SdmSubscription)
	}

	newSubscriptionID := strconv.Itoa(udrSelf.SdmSubscriptionIDGenerator)
	SdmSubscription.SubscriptionId = newSubscriptionID
	UESubsData.SdmSubscriptions[newSubscriptionID] = &SdmSubscription
	udrSelf.SdmSubscriptionIDGenerator++

	/* Contains the URI of the newly created resource, according
	   to the structure: {apiRoot}/subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}' */
	locationHeader := fmt.Sprintf("%s/subscription-data/%s/context-data/sdm-subscriptions/%s",
		udrSelf.GetIPv4GroupUri(udr_context.NUDR_DR), ueId, newSubscriptionID)

	c.Header("Location", locationHeader)
	c.JSON(http.StatusCreated, SdmSubscription)
}

func (p *Processor) QuerysdmsubscriptionsProcedure(c *gin.Context, ueId string) {
	udrSelf := udr_context.GetSelf()

	value, ok := udrSelf.UESubsCollection.Load(ueId)
	if !ok {
		pd := util.ProblemDetailsNotFound("USER_NOT_FOUND")
		c.JSON(int(pd.Status), pd)
		return
	}

	UESubsData := value.(*udr_context.UESubsData)
	var sdmSubscriptionSlice []models.SdmSubscription

	for _, v := range UESubsData.SdmSubscriptions {
		sdmSubscriptionSlice = append(sdmSubscriptionSlice, *v)
	}

	if len(sdmSubscriptionSlice) == 0 {
		pd := util.ProblemDetailsNotFound("SDMSUBSCRIPTION_NOT_FOUND")
		c.JSON(int(pd.Status), pd)
		return
	}

	c.JSON(http.StatusOK, sdmSubscriptionSlice)
}
