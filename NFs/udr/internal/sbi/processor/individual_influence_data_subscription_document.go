/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"net/http"
	"reflect"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi/models"
	udr_context "github.com/free5gc/udr/internal/context"
	"github.com/free5gc/udr/internal/util"
)

func (p *Processor) ApplicationDataInfluenceDataSubsToNotifySubscriptionIdDeleteProcedure(
	c *gin.Context, subscriptionId string,
) {
	udr_context.GetSelf().InfluenceDataSubscriptions.Delete(subscriptionId)
	c.Status(http.StatusNoContent)
}

func (p *Processor) ApplicationDataInfluenceDataSubsToNotifySubscriptionIdGetProcedure(
	c *gin.Context, subscriptionID string,
) {
	udrSelf := udr_context.GetSelf()
	if subscription, ok := udrSelf.InfluenceDataSubscriptions.Load(subscriptionID); ok {
		c.JSON(http.StatusOK, subscription)
	} else {
		pd := util.ProblemDetailsNotFound("USER_NOT_FOUND")
		c.JSON(int(pd.Status), pd)
	}
}

func (p *Processor) ApplicationDataInfluenceDataSubsToNotifySubscriptionIdPutProcedure(
	c *gin.Context, subscriptionId string, request *models.TrafficInfluSub,
) {
	if len(request.Dnns) == 0 &&
		len(request.Snssais) == 0 &&
		len(request.InternalGroupIds) == 0 &&
		len(request.Supis) == 0 {
		pd := &models.ProblemDetails{
			Status: http.StatusBadRequest,
			Detail: "At least one of DNNs, S-NSSAIs, Internal Group IDs or SUPIs shall be provided",
		}
		c.JSON(int(pd.Status), pd)
		return
	}

	if request.NotificationUri == "" {
		pd := models.ProblemDetails{
			Status: http.StatusBadRequest,
			Detail: "Notification URI shall be provided",
		}
		c.JSON(int(pd.Status), pd)
		return
	}

	udrSelf := udr_context.GetSelf()
	if subs, ok := udrSelf.InfluenceDataSubscriptions.Load(subscriptionId); ok && reflect.DeepEqual(*request, subs) {
		c.Status(http.StatusOK)
	} else {
		udrSelf.InfluenceDataSubscriptions.Store(subscriptionId, request)
		c.JSON(http.StatusOK, request)
	}
}
