/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package processor

import (
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"

	"github.com/free5gc/openapi/models"
	udr_context "github.com/free5gc/udr/internal/context"
	"github.com/free5gc/udr/internal/logger"
	"github.com/free5gc/udr/internal/util"
	"github.com/free5gc/util/mongoapi"
)

func (p *Processor) ApplicationDataInfluenceDataInfluenceIdPutProcedure(
	c *gin.Context, collName, influenceId string, request *models.TrafficInfluData,
) {
	putData := util.ToBsonM(*request)
	putData["influenceId"] = influenceId
	filter := bson.M{"influenceId": influenceId}

	var original *models.TrafficInfluData

	if mapData, err := mongoapi.RestfulAPIGetOne(collName, filter); err != nil {
		logger.DataRepoLog.Error(err.Error())
		problemDetails := &models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
		}
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	} else {
		if len(mapData) != 0 {
			original = new(models.TrafficInfluData)
			byteData, err := json.Marshal(mapData)
			if err != nil {
				logger.DataRepoLog.Error(err.Error())
				problemDetails := &models.ProblemDetails{
					Status: http.StatusInternalServerError,
					Detail: err.Error(),
				}
				c.JSON(int(problemDetails.Status), problemDetails)
				return
			}
			err = json.Unmarshal(byteData, &original)
			if err != nil {
				logger.DataRepoLog.Error(err.Error())
				problemDetails := &models.ProblemDetails{
					Status: http.StatusInternalServerError,
					Detail: err.Error(),
				}
				c.JSON(int(problemDetails.Status), problemDetails)
				return
			}
		}
	}

	isExisted, err := mongoapi.RestfulAPIPutOne(collName, filter, putData)
	if err != nil {
		logger.DataRepoLog.Errorf("ApplicationDataInfluenceDataInfluenceIdPutProcedure err: %+v", err)
		problemDetails := &models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
		}
		c.JSON(int(problemDetails.Status), problemDetails)
		return
	}
	if original == nil || !reflect.DeepEqual(*original, *request) {
		// Notify the change of influence data
		PreHandleInfluenceDataUpdateNotification(influenceId, original, request)
	}

	if isExisted {
		c.JSON(http.StatusOK, request)
	} else {
		// According to 3GPP TS 29.519 V16.5.0 clause 6.2.6.3.1
		// Contain the URI of the newly created resource with `Location` key in the header
		groupUri := udr_context.GetSelf().GetIPv4GroupUri(udr_context.NUDR_DR)
		resourceUri := fmt.Sprintf("%s/application-data/influenceData/%s", groupUri, influenceId)
		c.Header("Location", resourceUri)
		c.JSON(http.StatusCreated, request)
		return
	}
}

func (p *Processor) ApplicationDataInfluenceDataInfluenceIdPostProcedure(
	c *gin.Context,
) {
	c.Status(http.StatusMethodNotAllowed)
}
