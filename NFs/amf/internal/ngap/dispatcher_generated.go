// Code generated by ngap_generator.go, DO NOT EDIT.
package ngap

import (
	"github.com/free5gc/amf/internal/context"
	ngap_message "github.com/free5gc/amf/internal/ngap/message"
	"github.com/free5gc/ngap/ngapType"
)

func dispatchMain(ran *context.AmfRan, message *ngapType.NGAPPDU) {
	switch message.Present {
	case ngapType.NGAPPDUPresentInitiatingMessage:
		initiatingMessage := message.InitiatingMessage
		if initiatingMessage == nil {
			ran.Log.Errorln("InitiatingMessage is nil")
			return
		}
		switch initiatingMessage.ProcedureCode.Value {
		case ngapType.ProcedureCodeAMFConfigurationUpdate:
			handlerAMFConfigurationUpdate(ran, initiatingMessage)
		case ngapType.ProcedureCodeAMFStatusIndication:
			handlerAMFStatusIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodeCellTrafficTrace:
			handlerCellTrafficTrace(ran, initiatingMessage)
		case ngapType.ProcedureCodeDeactivateTrace:
			handlerDeactivateTrace(ran, initiatingMessage)
		case ngapType.ProcedureCodeDownlinkNASTransport:
			handlerDownlinkNASTransport(ran, initiatingMessage)
		case ngapType.ProcedureCodeDownlinkNonUEAssociatedNRPPaTransport:
			handlerDownlinkNonUEAssociatedNRPPaTransport(ran, initiatingMessage)
		case ngapType.ProcedureCodeDownlinkRANConfigurationTransfer:
			handlerDownlinkRANConfigurationTransfer(ran, initiatingMessage)
		case ngapType.ProcedureCodeDownlinkRANStatusTransfer:
			handlerDownlinkRANStatusTransfer(ran, initiatingMessage)
		case ngapType.ProcedureCodeDownlinkUEAssociatedNRPPaTransport:
			handlerDownlinkUEAssociatedNRPPaTransport(ran, initiatingMessage)
		case ngapType.ProcedureCodeErrorIndication:
			handlerErrorIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodeHandoverCancel:
			handlerHandoverCancel(ran, initiatingMessage)
		case ngapType.ProcedureCodeHandoverNotification:
			handlerHandoverNotify(ran, initiatingMessage)
		case ngapType.ProcedureCodeHandoverResourceAllocation:
			handlerHandoverRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeHandoverPreparation:
			handlerHandoverRequired(ran, initiatingMessage)
		case ngapType.ProcedureCodeInitialContextSetup:
			handlerInitialContextSetupRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeInitialUEMessage:
			handlerInitialUEMessage(ran, message, initiatingMessage)
		case ngapType.ProcedureCodeLocationReport:
			handlerLocationReport(ran, initiatingMessage)
		case ngapType.ProcedureCodeLocationReportingControl:
			handlerLocationReportingControl(ran, initiatingMessage)
		case ngapType.ProcedureCodeLocationReportingFailureIndication:
			handlerLocationReportingFailureIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodeNASNonDeliveryIndication:
			handlerNASNonDeliveryIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodeNGReset:
			handlerNGReset(ran, initiatingMessage)
		case ngapType.ProcedureCodeNGSetup:
			handlerNGSetupRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeOverloadStart:
			handlerOverloadStart(ran, initiatingMessage)
		case ngapType.ProcedureCodeOverloadStop:
			handlerOverloadStop(ran, initiatingMessage)
		case ngapType.ProcedureCodePDUSessionResourceModifyIndication:
			handlerPDUSessionResourceModifyIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodePDUSessionResourceModify:
			handlerPDUSessionResourceModifyRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodePDUSessionResourceNotify:
			handlerPDUSessionResourceNotify(ran, initiatingMessage)
		case ngapType.ProcedureCodePDUSessionResourceRelease:
			handlerPDUSessionResourceReleaseCommand(ran, initiatingMessage)
		case ngapType.ProcedureCodePDUSessionResourceSetup:
			handlerPDUSessionResourceSetupRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodePWSCancel:
			handlerPWSCancelRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodePWSFailureIndication:
			handlerPWSFailureIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodePWSRestartIndication:
			handlerPWSRestartIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodePaging:
			handlerPaging(ran, initiatingMessage)
		case ngapType.ProcedureCodePathSwitchRequest:
			handlerPathSwitchRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeRANConfigurationUpdate:
			handlerRANConfigurationUpdate(ran, initiatingMessage)
		case ngapType.ProcedureCodeRRCInactiveTransitionReport:
			handlerRRCInactiveTransitionReport(ran, initiatingMessage)
		case ngapType.ProcedureCodeRerouteNASRequest:
			handlerRerouteNASRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeSecondaryRATDataUsageReport:
			handlerSecondaryRATDataUsageReport(ran, initiatingMessage)
		case ngapType.ProcedureCodeTraceFailureIndication:
			handlerTraceFailureIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodeTraceStart:
			handlerTraceStart(ran, initiatingMessage)
		case ngapType.ProcedureCodeUEContextModification:
			handlerUEContextModificationRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeUEContextRelease:
			handlerUEContextReleaseCommand(ran, initiatingMessage)
		case ngapType.ProcedureCodeUEContextReleaseRequest:
			handlerUEContextReleaseRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeUERadioCapabilityCheck:
			handlerUERadioCapabilityCheckRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeUERadioCapabilityInfoIndication:
			handlerUERadioCapabilityInfoIndication(ran, initiatingMessage)
		case ngapType.ProcedureCodeUETNLABindingRelease:
			handlerUETNLABindingReleaseRequest(ran, initiatingMessage)
		case ngapType.ProcedureCodeUplinkNASTransport:
			handlerUplinkNASTransport(ran, initiatingMessage)
		case ngapType.ProcedureCodeUplinkNonUEAssociatedNRPPaTransport:
			handlerUplinkNonUEAssociatedNRPPaTransport(ran, initiatingMessage)
		case ngapType.ProcedureCodeUplinkRANConfigurationTransfer:
			handlerUplinkRANConfigurationTransfer(ran, initiatingMessage)
		case ngapType.ProcedureCodeUplinkRANStatusTransfer:
			handlerUplinkRANStatusTransfer(ran, initiatingMessage)
		case ngapType.ProcedureCodeUplinkUEAssociatedNRPPaTransport:
			handlerUplinkUEAssociatedNRPPaTransport(ran, initiatingMessage)
		case ngapType.ProcedureCodeWriteReplaceWarning:
			handlerWriteReplaceWarningRequest(ran, initiatingMessage)
		default:
			cause := ngapType.Cause{
				Present:  ngapType.CausePresentProtocol,
				Protocol: &ngapType.CauseProtocol{},
			}
			switch initiatingMessage.Criticality.Value {
			case ngapType.CriticalityPresentReject:
				ran.Log.Errorf("Not comprehended procedure code of InitiatingMessage (criticality: reject, procedureCode:0x%02x)", initiatingMessage.ProcedureCode.Value)
				cause.Protocol.Value = ngapType.CauseProtocolPresentAbstractSyntaxErrorReject
			case ngapType.CriticalityPresentIgnore:
				ran.Log.Infof("Not comprehended procedure code of InitiatingMessage (criticality: ignore, procedureCode:0x%02x)", initiatingMessage.ProcedureCode.Value)
				return
			case ngapType.CriticalityPresentNotify:
				ran.Log.Warnf("Not comprehended procedure code of InitiatingMessage (criticality: notify, procedureCode:0x%02x)", initiatingMessage.ProcedureCode.Value)
				cause.Protocol.Value = ngapType.CauseProtocolPresentAbstractSyntaxErrorIgnoreAndNotify
			}
			triggeringMessage := ngapType.TriggeringMessagePresentInitiatingMessage
			criticalityDiagnostics := buildCriticalityDiagnostics(&initiatingMessage.ProcedureCode.Value, &triggeringMessage, &initiatingMessage.Criticality.Value, nil)
			ngap_message.SendErrorIndication(ran, nil, nil, &cause, &criticalityDiagnostics)
		}
	case ngapType.NGAPPDUPresentSuccessfulOutcome:
		successfulOutcome := message.SuccessfulOutcome
		if successfulOutcome == nil {
			ran.Log.Errorln("SuccessfulOutcome is nil")
			return
		}
		switch successfulOutcome.ProcedureCode.Value {
		case ngapType.ProcedureCodeAMFConfigurationUpdate:
			handlerAMFConfigurationUpdateAcknowledge(ran, successfulOutcome)
		case ngapType.ProcedureCodeHandoverCancel:
			handlerHandoverCancelAcknowledge(ran, successfulOutcome)
		case ngapType.ProcedureCodeHandoverPreparation:
			handlerHandoverCommand(ran, successfulOutcome)
		case ngapType.ProcedureCodeHandoverResourceAllocation:
			handlerHandoverRequestAcknowledge(ran, successfulOutcome)
		case ngapType.ProcedureCodeInitialContextSetup:
			handlerInitialContextSetupResponse(ran, successfulOutcome)
		case ngapType.ProcedureCodeNGReset:
			handlerNGResetAcknowledge(ran, successfulOutcome)
		case ngapType.ProcedureCodeNGSetup:
			handlerNGSetupResponse(ran, successfulOutcome)
		case ngapType.ProcedureCodePDUSessionResourceModifyIndication:
			handlerPDUSessionResourceModifyConfirm(ran, successfulOutcome)
		case ngapType.ProcedureCodePDUSessionResourceModify:
			handlerPDUSessionResourceModifyResponse(ran, successfulOutcome)
		case ngapType.ProcedureCodePDUSessionResourceRelease:
			handlerPDUSessionResourceReleaseResponse(ran, successfulOutcome)
		case ngapType.ProcedureCodePDUSessionResourceSetup:
			handlerPDUSessionResourceSetupResponse(ran, successfulOutcome)
		case ngapType.ProcedureCodePWSCancel:
			handlerPWSCancelResponse(ran, successfulOutcome)
		case ngapType.ProcedureCodePathSwitchRequest:
			handlerPathSwitchRequestAcknowledge(ran, successfulOutcome)
		case ngapType.ProcedureCodeRANConfigurationUpdate:
			handlerRANConfigurationUpdateAcknowledge(ran, successfulOutcome)
		case ngapType.ProcedureCodeUEContextModification:
			handlerUEContextModificationResponse(ran, successfulOutcome)
		case ngapType.ProcedureCodeUEContextRelease:
			handlerUEContextReleaseComplete(ran, successfulOutcome)
		case ngapType.ProcedureCodeUERadioCapabilityCheck:
			handlerUERadioCapabilityCheckResponse(ran, successfulOutcome)
		case ngapType.ProcedureCodeWriteReplaceWarning:
			handlerWriteReplaceWarningResponse(ran, successfulOutcome)
		default:
			cause := ngapType.Cause{
				Present:  ngapType.CausePresentProtocol,
				Protocol: &ngapType.CauseProtocol{},
			}
			switch successfulOutcome.Criticality.Value {
			case ngapType.CriticalityPresentReject:
				ran.Log.Errorf("Not comprehended procedure code of SuccessfulOutcome (criticality: reject, procedureCode:0x%02x)", successfulOutcome.ProcedureCode.Value)
				cause.Protocol.Value = ngapType.CauseProtocolPresentAbstractSyntaxErrorReject
			case ngapType.CriticalityPresentIgnore:
				ran.Log.Infof("Not comprehended procedure code of SuccessfulOutcome (criticality: ignore, procedureCode:0x%02x)", successfulOutcome.ProcedureCode.Value)
				return
			case ngapType.CriticalityPresentNotify:
				ran.Log.Warnf("Not comprehended procedure code of SuccessfulOutcome (criticality: notify, procedureCode:0x%02x)", successfulOutcome.ProcedureCode.Value)
				cause.Protocol.Value = ngapType.CauseProtocolPresentAbstractSyntaxErrorIgnoreAndNotify
			}
			triggeringMessage := ngapType.TriggeringMessagePresentSuccessfulOutcome
			criticalityDiagnostics := buildCriticalityDiagnostics(&successfulOutcome.ProcedureCode.Value, &triggeringMessage, &successfulOutcome.Criticality.Value, nil)
			ngap_message.SendErrorIndication(ran, nil, nil, &cause, &criticalityDiagnostics)
		}
	case ngapType.NGAPPDUPresentUnsuccessfulOutcome:
		unsuccessfulOutcome := message.UnsuccessfulOutcome
		if unsuccessfulOutcome == nil {
			ran.Log.Errorln("UnsuccessfulOutcome is nil")
			return
		}
		switch unsuccessfulOutcome.ProcedureCode.Value {
		case ngapType.ProcedureCodeAMFConfigurationUpdate:
			handlerAMFConfigurationUpdateFailure(ran, unsuccessfulOutcome)
		case ngapType.ProcedureCodeHandoverResourceAllocation:
			handlerHandoverFailure(ran, unsuccessfulOutcome)
		case ngapType.ProcedureCodeHandoverPreparation:
			handlerHandoverPreparationFailure(ran, unsuccessfulOutcome)
		case ngapType.ProcedureCodeInitialContextSetup:
			handlerInitialContextSetupFailure(ran, unsuccessfulOutcome)
		case ngapType.ProcedureCodeNGSetup:
			handlerNGSetupFailure(ran, unsuccessfulOutcome)
		case ngapType.ProcedureCodePathSwitchRequest:
			handlerPathSwitchRequestFailure(ran, unsuccessfulOutcome)
		case ngapType.ProcedureCodeRANConfigurationUpdate:
			handlerRANConfigurationUpdateFailure(ran, unsuccessfulOutcome)
		case ngapType.ProcedureCodeUEContextModification:
			handlerUEContextModificationFailure(ran, unsuccessfulOutcome)
		default:
			cause := ngapType.Cause{
				Present:  ngapType.CausePresentProtocol,
				Protocol: &ngapType.CauseProtocol{},
			}
			switch unsuccessfulOutcome.Criticality.Value {
			case ngapType.CriticalityPresentReject:
				ran.Log.Errorf("Not comprehended procedure code of UnsuccessfulOutcome (criticality: reject, procedureCode:0x%02x)", unsuccessfulOutcome.ProcedureCode.Value)
				cause.Protocol.Value = ngapType.CauseProtocolPresentAbstractSyntaxErrorReject
			case ngapType.CriticalityPresentIgnore:
				ran.Log.Infof("Not comprehended procedure code of UnsuccessfulOutcome (criticality: ignore, procedureCode:0x%02x)", unsuccessfulOutcome.ProcedureCode.Value)
				return
			case ngapType.CriticalityPresentNotify:
				ran.Log.Warnf("Not comprehended procedure code of UnsuccessfulOutcome (criticality: notify, procedureCode:0x%02x)", unsuccessfulOutcome.ProcedureCode.Value)
				cause.Protocol.Value = ngapType.CauseProtocolPresentAbstractSyntaxErrorIgnoreAndNotify
			}
			triggeringMessage := ngapType.TriggeringMessagePresentUnsuccessfullOutcome
			criticalityDiagnostics := buildCriticalityDiagnostics(&unsuccessfulOutcome.ProcedureCode.Value, &triggeringMessage, &unsuccessfulOutcome.Criticality.Value, nil)
			ngap_message.SendErrorIndication(ran, nil, nil, &cause, &criticalityDiagnostics)
		}
	}
}
