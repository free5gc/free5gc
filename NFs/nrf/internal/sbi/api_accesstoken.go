/*
 * NRF OAuth2
 *
 * NRF OAuth2 Authorization
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sbi

import (
	"encoding/json"
	"net/http"
	"reflect"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/nrf/internal/logger"
	"github.com/free5gc/nrf/internal/util"
	"github.com/free5gc/nrf/pkg/factory"
	"github.com/free5gc/openapi/models"
)

func (s *Server) getAccesstokenRoutes() []Route {
	return []Route{
		{
			"Index",
			http.MethodGet,
			"/",
			func(c *gin.Context) {
				c.JSON(http.StatusOK, "free5gc")
			},
		},
		{
			"AccessTokenRequest",
			http.MethodPost,
			"/oauth2/token",
			s.HTTPAccessTokenRequest,
		},
	}
}

// AccessTokenRequest - Access Token Request
func (s *Server) HTTPAccessTokenRequest(c *gin.Context) {
	logger.AccTokenLog.Infoln("In HTTPAccessTokenRequest")

	if !factory.NrfConfig.GetOAuth() {
		pd := &models.ProblemDetails{
			Title:  "OAuth2 not enable",
			Status: http.StatusBadRequest,
			Detail: "OAuth2 not enable",
		}
		util.GinProblemJson(c, pd)
		return
	}

	var accessTokenReq models.NrfAccessTokenAccessTokenReq

	// Request parser
	err := c.Request.ParseForm()
	if err != nil {
		logger.AccTokenLog.Errorf("ParseForm err: %+v", err)
		pd := &models.ProblemDetails{
			Title:  "Request ParseForm Error",
			Status: http.StatusBadRequest,
			Detail: err.Error(),
		}
		util.GinProblemJson(c, pd)
		return
	}
	rt := reflect.TypeOf(accessTokenReq)
	for key, value := range c.Request.PostForm {
		var name string
		var vt reflect.Type
		for i := 0; i < rt.NumField(); i++ {
			if tag := rt.Field(i).Tag.Get("yaml"); tag == key {
				name = rt.Field(i).Name
				vt = rt.Field(i).Type
				break
			}
		}
		if vt == reflect.TypeOf("") || vt == reflect.TypeOf(models.NrfNfManagementNfType_NRF) {
			// Type is string
			reflect.ValueOf(&accessTokenReq).Elem().FieldByName(name).SetString(value[0])
		} else {
			plmnid := models.PlmnId{}
			err = json.Unmarshal([]byte(value[0]), &plmnid)
			if err != nil {
				problemDetail := "[Request Body] " + err.Error()
				pd := &models.ProblemDetails{
					Title:  "Json Unmarshal Error",
					Status: http.StatusBadRequest,
					Detail: problemDetail,
				}
				logger.AccTokenLog.Errorf("PlmnId Unmarshal err:%+v", problemDetail)
				util.GinProblemJson(c, pd)
				return
			}
			reflectvalue := reflect.ValueOf(&plmnid)
			reflect.ValueOf(&accessTokenReq).Elem().FieldByName(name).Set(reflectvalue)
		}
	}
	s.Processor().HandleAccessTokenRequest(c, accessTokenReq)
}
