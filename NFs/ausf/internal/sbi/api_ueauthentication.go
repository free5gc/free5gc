/*
 * Nausf_UeAuthentication
 *
 * UeAuthentication Service
 * Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).
 * All rights reserved.
 *
 * API version: 3.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sbi

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/ausf/internal/logger"
	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
)

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

func (s *Server) getUeAuthenticationRoutes() []Route {
	return []Route{
		{
			Name:    "Index",
			Method:  http.MethodGet,
			Pattern: "/",
			APIFunc: func(c *gin.Context) {
				c.String(http.StatusOK, "Hello free5GC!")
			},
		},
		{
			Name:    "EapAuthMethod",
			Method:  http.MethodPost,
			Pattern: "/ue-authentications/:authCtxId/eap-session",
			APIFunc: s.HTTPEapAuthMethod,
		},
		{
			Name:    "UeAuthenticationsPost",
			Method:  http.MethodPost,
			Pattern: "/ue-authentications",
			APIFunc: s.HTTPUeAuthenticationsPost,
		},
		{
			Name:    "UeAuthenticationsAuthCtxId5gAkaConfirmationPut",
			Method:  http.MethodPut,
			Pattern: "/ue-authentications/:authCtxId/5g-aka-confirmation",
			APIFunc: s.HTTPUeAuthenticationsAuthCtxId5gAkaConfirmationPut,
		},

		{
			Name:    "Delete5gAkaAuthenticationResult",
			Method:  http.MethodDelete,
			Pattern: "/ue-authentications/:authCtxId/5g-aka-confirmation",
			APIFunc: s.HTTPDelete5gAkaAuthenticationResult,
		},
		{
			Name:    "DeleteEapAuthenticationResult",
			Method:  http.MethodDelete,
			Pattern: "/ue-authentications/:authCtxId/eap-session",
			APIFunc: s.HTTPDeleteEapAuthenticationResult,
		},
		{
			Name:    "DeleteProSeAuthenticationResult",
			Method:  http.MethodDelete,
			Pattern: "/prose-authentications/:authCtxId/prose-auth",
			APIFunc: s.HTTPDeleteProSeAuthenticationResult,
		},
		{
			Name:    "ProseAuth",
			Method:  http.MethodPost,
			Pattern: "/prose-authentications",
			APIFunc: s.HTTPProseAuth,
		},
		{
			Name:    "ProseAuthenticationsPost",
			Method:  http.MethodPost,
			Pattern: "/prose-authentications/:authCtxId/prose-auth",
			APIFunc: s.HTTPProseAuthenticationsPost,
		},
		{
			Name:    "RgAuthenticationsPost",
			Method:  http.MethodPost,
			Pattern: "/rg-authentications/:authCtxId",
			APIFunc: s.HTTPRgAuthenticationsPost,
		},
		{
			Name:    "UeAuthenticationsDeregisterPost",
			Method:  http.MethodPost,
			Pattern: "/ue-authentications/deregister",
			APIFunc: s.HTTPUeAuthenticationsDeregisterPost,
		},
		{
			Name:    "CreateRgAuthentications",
			Method:  http.MethodPost,
			Pattern: "/rg-authentications",
			APIFunc: s.HTTPPostRgAuthentications,
		},
	}
}

func (s *Server) HTTPEapAuthMethod(c *gin.Context) {
	var eapSessionReq models.EapSession

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.Auth5gAkaLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&eapSessionReq, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.Auth5gAkaLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}
	eapSessionId := c.Param("authCtxId")

	s.Processor().HandleEapAuthComfirmRequest(c, eapSessionReq, eapSessionId)
}

func (s *Server) HTTPUeAuthenticationsPost(c *gin.Context) {
	var authInfo models.AuthenticationInfo

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.UeAuthLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&authInfo, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.UeAuthLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	s.Processor().HandleUeAuthPostRequest(c, authInfo)
}

func (s *Server) HTTPUeAuthenticationsAuthCtxId5gAkaConfirmationPut(c *gin.Context) {
	var confirmationData models.ConfirmationData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.Auth5gAkaLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&confirmationData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.Auth5gAkaLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}
	confirmationDataResponseId := c.Param("authCtxId")

	s.Processor().HandleAuth5gAkaComfirmRequest(c, confirmationData, confirmationDataResponseId)
}

func (s *Server) HTTPDelete5gAkaAuthenticationResult(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

func (s *Server) HTTPDeleteEapAuthenticationResult(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

func (s *Server) HTTPDeleteProSeAuthenticationResult(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

func (s *Server) HTTPProseAuth(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

func (s *Server) HTTPProseAuthenticationsPost(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

func (s *Server) HTTPRgAuthenticationsPost(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

func (s *Server) HTTPUeAuthenticationsDeregisterPost(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

func (s *Server) HTTPPostRgAuthentications(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}
