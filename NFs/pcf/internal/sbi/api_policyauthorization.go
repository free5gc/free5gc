/*
 * Npcf_PolicyAuthorization Service API
 *
 * This is the Policy Authorization Service
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sbi

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
	"github.com/free5gc/pcf/internal/logger"
	"github.com/free5gc/pcf/internal/util"
)

func (s *Server) getPolicyAuthorizationRoutes() []Route {
	return []Route{
		{
			Name:    "PostAppSessions",
			Method:  http.MethodPost,
			Pattern: "/app-sessions",
			APIFunc: s.HTTPPostAppSessions,
		},
		{
			Name:    "DeleteEventsSubsc",
			Method:  http.MethodDelete,
			Pattern: "/app-sessions/:appSessionId/events-subscription",
			APIFunc: s.HTTPDeleteEventsSubsc,
		},
		{
			Name:    "UpdateEventsSubsc",
			Method:  http.MethodPut,
			Pattern: "/app-sessions/:appSessionId/events-subscription",
			APIFunc: s.HTTPUpdateEventsSubsc,
		},
		{
			Name:    "DeleteAppSession",
			Method:  http.MethodPost,
			Pattern: "/app-sessions/:appSessionId/delete",
			APIFunc: s.HTTPDeleteAppSession,
		},
		{
			Name:    "GetAppSession",
			Method:  http.MethodGet,
			Pattern: "/app-sessions/:appSessionId",
			APIFunc: s.HTTPGetAppSession,
		},
		{
			Name:    "ModAppSession",
			Method:  http.MethodPatch,
			Pattern: "/app-sessions/:appSessionId",
			APIFunc: s.HTTPModAppSession,
		},
		{
			Name:    "PcscfRestoration",
			Method:  http.MethodPost,
			Pattern: "/app-sessions/pcscf-restoration",
			APIFunc: s.HTTPPcscfRestoration,
		},
	}
}

// PcscfRestoration - Indicates P-CSCF restoration and does not create an Individual Application Session Context
func (s *Server) HTTPPcscfRestoration(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

// api_application_session
// HTTPPostAppSessions - Creates a new Individual Application Session Context resource
func (s *Server) HTTPPostAppSessions(c *gin.Context) {
	var appSessionContext models.AppSessionContext

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.PolicyAuthLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&appSessionContext, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.PolicyAuthLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	ascReqData := appSessionContext.AscReqData
	if ascReqData == nil || ascReqData.SuppFeat == "" || ascReqData.NotifUri == "" {
		// Check Mandatory IEs
		rsp := util.GetProblemDetail("Errorneous/Missing Mandotory IE", util.ERROR_INITIAL_PARAMETERS)
		logger.PolicyAuthLog.Errorln(rsp.Detail)
		c.JSON(int(rsp.Status), rsp)
		return
	}

	s.Processor().HandlePostAppSessionsContext(c, appSessionContext)
}

// api_events_subscription
// HTTPDeleteEventsSubsc - deletes the Events Subscription subresource
func (s *Server) HTTPDeleteEventsSubsc(c *gin.Context) {
	appSessionId := c.Params.ByName("appSessionId")
	if appSessionId == "" {
		problemDetails := &models.ProblemDetails{
			Title:  util.ERROR_INITIAL_PARAMETERS,
			Status: http.StatusBadRequest,
		}
		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	s.Processor().HandleDeleteEventsSubscContext(c, appSessionId)
}

// HTTPUpdateEventsSubsc - creates or modifies an Events Subscription subresource
func (s *Server) HTTPUpdateEventsSubsc(c *gin.Context) {
	var eventsSubscReqData models.PcfPolicyAuthorizationEventsSubscReqData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.PolicyAuthLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&eventsSubscReqData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.PolicyAuthLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	if eventsSubscReqData.Events == nil || eventsSubscReqData.NotifUri == "" {
		problemDetail := util.GetProblemDetail("Errorneous/Missing Mandotory IE", util.ERROR_REQUEST_PARAMETERS)
		logger.PolicyAuthLog.Errorln(problemDetail.Detail)
		c.JSON(int(problemDetail.Status), problemDetail)
		return
	}

	appSessionId := c.Params.ByName("appSessionId")
	if appSessionId == "" {
		problemDetails := &models.ProblemDetails{
			Title:  util.ERROR_INITIAL_PARAMETERS,
			Status: http.StatusBadRequest,
		}
		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	s.Processor().HandleUpdateEventsSubscContext(c, appSessionId, eventsSubscReqData)
}

func (s *Server) HTTPDeleteAppSession(c *gin.Context) {
	var eventsSubscReqData *models.PcfPolicyAuthorizationEventsSubscReqData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.PolicyAuthLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	// EventsSubscReqData is Optional
	if len(requestBody) > 0 {
		err = openapi.Deserialize(&eventsSubscReqData, requestBody, "application/json")
		if err != nil {
			problemDetail := "[Request Body] " + err.Error()
			rsp := models.ProblemDetails{
				Title:  "Malformed request syntax",
				Status: http.StatusBadRequest,
				Detail: problemDetail,
			}
			logger.PolicyAuthLog.Errorln(problemDetail)
			c.JSON(http.StatusBadRequest, rsp)
			return
		}
	}

	appSessionId := c.Params.ByName("appSessionId")
	if appSessionId == "" {
		problemDetails := &models.ProblemDetails{
			Title:  util.ERROR_INITIAL_PARAMETERS,
			Status: http.StatusBadRequest,
		}
		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	s.Processor().HandleDeleteAppSessionContext(c, appSessionId, eventsSubscReqData)
}

// HTTPGetAppSession - Reads an existing Individual Application Session Context
func (s *Server) HTTPGetAppSession(c *gin.Context) {
	appSessionId := c.Params.ByName("appSessionId")
	if appSessionId == "" {
		problemDetails := &models.ProblemDetails{
			Title:  util.ERROR_INITIAL_PARAMETERS,
			Status: http.StatusBadRequest,
		}
		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	s.Processor().HandleGetAppSessionContext(c, appSessionId)
}

// HTTPModAppSession - Modifies an existing Individual Application Session Context
func (s *Server) HTTPModAppSession(c *gin.Context) {
	var appSessionContextUpdateData models.AppSessionContextUpdateData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.PolicyAuthLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&appSessionContextUpdateData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.PolicyAuthLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	appSessionId := c.Params.ByName("appSessionId")
	if appSessionId == "" {
		problemDetails := &models.ProblemDetails{
			Title:  util.ERROR_INITIAL_PARAMETERS,
			Status: http.StatusBadRequest,
		}
		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}

	s.Processor().HandleModAppSessionContext(c, appSessionId, appSessionContextUpdateData)
}
